<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

    <!--进行权限控制-->
    <!--JSR250注解方式-->
<!--    <security:global-method-security jsr250-annotations="enabled"/>-->
    <!--@Secured注解-->
<!--    <security:global-method-security secured-annotations="enabled"/>-->
    <!--表达式方式-->
<!--    <security:global-method-security pre-post-annotations="enabled"/>-->

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="false">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>
        <!-- 自定义登陆页面，login-page 自定义登陆页面 authentication-failure-url 用户权限校验失败之
    后才会跳转到这个页面，如果数据库中没有这个用户则不会跳转到这个页面。
    default-target-url 登陆成功后跳转的页面。 注：登陆页面用户名固定 username，密码
    password，action:login -->
        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"

        />
<!--        default-target-url="/403.jsp"-->
<!--        always-use-default-target="true"-->
        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp"/>

    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
<!--            &lt;!&ndash; 配置加密的方式&ndash;&gt;-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--页面端控制 和上面的  use-expressions="false" 有关 ，
    当为false时，可以用下面的配置，为true 时用上面的配置需要在角色前加:hasAnyRole()
    -->
<!--    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->

    <!-- 提供了入门的方式，在内存中存入用户名和密码
        <security:authentication-manager>
            <security:authentication-provider>
                    <security:user-service>
                        <security:user name="user" password="{noop}user"
                                    authorities="ROLE_USER" />
                        <security:user name="admin" password="{noop}admin"
                                    authorities="ROLE_ADMIN" />
                    </security:user-service>
            </security:authentication-provider>
        </security:authentication-manager>
        -->

</beans>